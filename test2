int x, y, z;
bool a,b,c;


int myAwesomeFunction(void){
	int wootWoot;
	wootWoot := 5;
	
	return;
}


bool myBooawesomeFunction(void){
	int wootWoot;
	int pirate[myAwesomeFunction()];
	boo(pirate[x]);
	wootWoot := boo(x,y,z);
	wootWoot := 5;

	
	branch(true) --can't switch on true
		case 4: ;
	end;
	return wootWoot;
}

int boo(int input[]) {
	-- Some sort of compound statement
	{		
		int t;
		bool ImABoolean, ImAnotherBoolean;
		t := 42;

		ImABoolean := true;
		ImAnotherBoolean := ImABoolean; -- Uninitialized var
		
		abraKadabra:= 5; --undelcared id

		if(a > x) {;}--mismatch relationtional operator types 
		if(x&&y){;} -- incorrect logical operator type
		if(not x){;}

		--bool ImABoo00oolean;
		ImABoolean := 5; --assigned wrongly typed value
	}

	input[1] := readint();
	if(input[1] = 4) {
		writeint(input); -- Passing array to int param
		return 3;
	}

	branch (input[0]) -- multiple same case, multiple default
		case 4:
			return input[0] * 2;
		default:
			return input[0] * 500;
		case 4:
			return input[0] - 4;
		default:
			return 0;
	end;

	--return 5; -- Missing return statement
}

-- Redefining pre-defined function
int readint(void) {
	return true; -- Return bool from int-returning func
}

void foo(void) {
	return true; -- Returning value from void func
}

int main(void) {
	int x[4], y;
	int bad1[-1*3]; -- Negative-sized array
	int bad2[y*3]; -- Dynamically-sized array
	bool yourFace;
	bool youSuck;
	int meaning_of_life;

	x[0] := 0+1;
	x[1] := boo(x);
	x[1] := boo(y); -- Passing int to array param
	y := foo(); -- Function is void
	boo(x); -- Function is nonvoid
	if(y) { -- y is not a boolean
		;
	}

	youSuck := -false;

	exit; -- Exit outside loop
	continue; -- Continue outside loop

	if(x[y-1]=0){
		yourFace := not true;
		youSuck := true;
	}
	else{
		x:=-5;
	}

	x := true; -- Assignment of wrong type
	x := 4 + false; -- Wrong types for oper

	-- Dangling else
	if(yourFace)
		if(x[0] = 1)
			x[0] := 2;
		else
			x[0] := 1;
	if(youSuck)
		if(x[0] = 1)
			x[0] := 2;
		else
			x[0] := 1;
	else
		youSuck := true;

	loop x:=x*(1+2);
	if(x>=10)
		exit;
	if(y = 4) {
		continue;
	}
	end;

	loop x:=x+1;
	loop y:=y+1;
		exit;
	end;
	if(y = 7) {
		int xyz;
		exit; -- Exit outside loop, because CS has declarations (int xyz)
	}
	continue;
	end;

	meaning_of_life := 42;

	return 3;
}

-- Last defn is not int main(void)
int main2(void) {
	return 4;
}
